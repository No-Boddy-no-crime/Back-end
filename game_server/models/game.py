# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from game_server.models.base_model_ import Model
from game_server import util


class Game(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, game_board_id=None, status=None):  # noqa: E501
        """Game - a model defined in OpenAPI

        :param game_board_id: The game_board_id of this Game.  # noqa: E501
        :type game_board_id: str
        :param status: The status of this Game.  # noqa: E501
        :type status: str
        """
        self.openapi_types = {
            'game_board_id': str,
            'status': str
        }

        self.attribute_map = {
            'game_board_id': 'game_board_id',
            'status': 'status'
        }

        self._game_board_id = game_board_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'Game':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The game of this Game.  # noqa: E501
        :rtype: Game
        """
        return util.deserialize_model(dikt, cls)

    @property
    def game_board_id(self):
        """Gets the game_board_id of this Game.

        a unique identifier for a game board  # noqa: E501

        :return: The game_board_id of this Game.
        :rtype: str
        """
        return self._game_board_id

    @game_board_id.setter
    def game_board_id(self, game_board_id):
        """Sets the game_board_id of this Game.

        a unique identifier for a game board  # noqa: E501

        :param game_board_id: The game_board_id of this Game.
        :type game_board_id: str
        """

        self._game_board_id = game_board_id

    @property
    def status(self):
        """Gets the status of this Game.

        pet status in the store  # noqa: E501

        :return: The status of this Game.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Game.

        pet status in the store  # noqa: E501

        :param status: The status of this Game.
        :type status: str
        """
        allowed_values = ["active", "finished"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
